package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

    boolean errorDetected;
    
    Logger log = Logger.getLogger(getClass());
   
    
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
        errorDetected = true;
        StringBuilder msg = new StringBuilder(message); 
        if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
    errorDetected = false;
:}

scan with {:
    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null) 
        log.info(s.toString() + " " + s.value.toString());
    return s;
:}


terminal PROG, PRINT, RETURN, VOID, NEW, READ, CONST, BREAK, CONTINUE, FOR, RANGE;
terminal PLUS, MINUS, MUL, DIV, MOD, INC, DEC, OR, AND, EQUALITY, NOTEQUAL, GT, GTE, LT, LTE;
terminal EQUAL, SEMI, COMMA, COLUMN, LPAREN, RPAREN, LBRACE, RBRACE, LSQBRACE, RSQBRACE, DBLCOL;
terminal COMMENT, BOOLCONST;
terminal Integer NUMBER;
terminal Character CHARCONST;
terminal String IDENT;

nonterminal DeclList DeclList;
nonterminal DeclOne DeclOne;
nonterminal ConstDecl ConstDecl;
nonterminal ConstOne ConstOne;
nonterminal ConstDeclOptionsListExists ConstDeclOptionsListExists;
nonterminal ConstDeclOptionsList ConstDeclOptionsList;
nonterminal VarDeclList VarDeclList;
nonterminal VarDeclPartOne VarDeclPartOne;
nonterminal VarDeclOne VarDeclOne;
nonterminal VarDecl VarDecl;
nonterminal SqBracesOption SqBracesOption;
nonterminal VarDeclPartListExists VarDeclPartListExists;
nonterminal VarDeclPartList VarDeclPartList;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal PrintOptions PrintOptions;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesignatorOptions DesignatorOptions;
nonterminal AddopTermListExists AddopTermListExists;
nonterminal AddopTermList AddopTermList;
nonterminal MinusOption MinusOption;
nonterminal MulopFactorListExists MulopFactorListExists;
nonterminal MulopFactorList MulopFactorList;
nonterminal Label Label;
nonterminal AssignOp AssignOp;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, FunctionMain, FunctionTypeName, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, Expr, TypeOptions;

Program ::= (Program) PROG ProgName:p DeclList:D1 LBRACE FunctionMain:F2 RBRACE {: RESULT=new Program(p, D1, F2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

DeclList ::= (DeclListMore) DeclList:D1 DeclOne:D2 {: RESULT=new DeclListMore(D1, D2); RESULT.setLine(D1left); :}
            | (NoDeclList) {: RESULT=new NoDeclList(); :};

DeclOne ::= (ConstDeclaration) ConstDecl:C1 {: RESULT=new ConstDeclaration(C1); RESULT.setLine(C1left); :}
            | (VarDeclaration) VarDecl:V1 {: RESULT=new VarDeclaration(V1); RESULT.setLine(V1left); :};

ConstDecl ::= (ConstDecl) CONST Type:T1 ConstOne:C2 ConstDeclOptionsListExists:C3 SEMI {: RESULT=new ConstDecl(T1, C2, C3); RESULT.setLine(T1left); :};

ConstOne::= (NumConst) IDENT:constName EQUAL NUMBER:value {: RESULT=new NumConst(constName, value); RESULT.setLine(constNameleft); :}
            | (CharConstant)  IDENT:constName EQUAL CHARCONST:value {: RESULT=new CharConstant(constName, value); RESULT.setLine(constNameleft); :}
            | (BoolConstant)  IDENT:constName EQUAL BOOLCONST:value {: RESULT=new BoolConstant(constName); RESULT.setLine(constNameleft); :};



ConstDeclOptionsListExists ::= (ConstDeclOptionsListExist) ConstDeclOptionsList:C1 {: RESULT=new ConstDeclOptionsListExist(C1); RESULT.setLine(C1left); :}
    | (NoConstDeclOptions) {: RESULT=new NoConstDeclOptions(); :};

ConstDeclOptionsList ::= (ConstDeclOptionsListMany) ConstDeclOptionsList:C1 COMMA ConstOne:C2 {: RESULT=new ConstDeclOptionsListMany(C1, C2); RESULT.setLine(C1left); :}
    | (ConstDeclOptionsListOne) COMMA ConstOne:C1 {: RESULT=new ConstDeclOptionsListOne(C1); RESULT.setLine(C1left); :};


VarDeclList ::= (VarDeclListMany) VarDecl:V1 VarDeclList:V2 {: RESULT=new VarDeclListMany(V1, V2); RESULT.setLine(V1left); :} 
    | (NoVarDeclList) {: RESULT=new NoVarDeclList(); :};

VarDecl ::= (VarDeclarationOne) VarDeclOne:V1 SqBracesOption:S2 VarDeclPartListExists:V3 SEMI {: RESULT=new VarDeclarationOne(V1, S2, V3); RESULT.setLine(V1left); :}
    | (VarErrorComma)error COMMA:l
    {: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null); :} {: RESULT=new VarErrorComma(); :}
    |(VarErrorSemi) error SEMI:l
    {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new VarErrorSemi(); :};

VarDeclOne ::= (VarDeclOne) Type:varType IDENT:varName {: RESULT=new VarDeclOne(varType, varName); RESULT.setLine(varTypeleft); :};

SqBracesOption ::= (SqBraces) LSQBRACE RSQBRACE {: RESULT=new SqBraces(); :}
    | (NoSqBraces) {: RESULT=new NoSqBraces(); :};

VarDeclPartListExists ::= (VarDeclPartListExist) VarDeclPartList:V1 {: RESULT=new VarDeclPartListExist(V1); RESULT.setLine(V1left); :}
    | (NoVarDeclPartList) {: RESULT=new NoVarDeclPartList(); :};

VarDeclPartList ::= (VarDeclPartListMany) VarDeclPartOne:V1 VarDeclPartList:V2 {: RESULT=new VarDeclPartListMany(V1, V2); RESULT.setLine(V1left); :}
    | (VarDeclPartListOne) VarDeclPartOne:V1 {: RESULT=new VarDeclPartListOne(V1); RESULT.setLine(V1left); :};

VarDeclPartOne ::= (VarDeclPartOne) COMMA IDENT:varName SqBracesOption:S1 {: RESULT=new VarDeclPartOne(varName, S1); RESULT.setLine(varNameleft); :};

FunctionMain ::= (FunctionMain)  FunctionTypeName:F1 LPAREN RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new FunctionMain(F1, V2, S3); RESULT.setLine(F1left); :};

FunctionTypeName ::= (FunctionTypeName) TypeOptions:typeName IDENT:funcName {: RESULT=new FunctionTypeName(typeName, funcName); RESULT.setLine(typeNameleft); :};

TypeOptions ::= (TypeOption) Type:typeName {: RESULT=new TypeOption(typeName); RESULT.setLine(typeNameleft); :}
    | (VoidOption) VOID:typeName {: RESULT=new VoidOption(); :};

StatementList ::= (StatementListMany) StatementList:S1 Statement:S2 {: RESULT=new StatementListMany(S1, S2); RESULT.setLine(S1left); :}
    | (NoStatementList) {: RESULT=new NoStatementList(); :};

Statement ::= 
    (DesignatorStatementOp) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStatementOp(D1); RESULT.setLine(D1left); :}
    | (ReadStatement) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :} 
    | (PrintStatement) PRINT LPAREN Expr:E1 PrintOptions:P2 RPAREN SEMI {: RESULT=new PrintStatement(E1, P2); RESULT.setLine(E1left); :}
    | error SEMI:l
    {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new StatementDerived1(); :};

PrintOptions ::= (PrintOption) COMMA NUMBER:printNumber {: RESULT=new PrintOption(printNumber); RESULT.setLine(printNumberleft); :}
    | (NoPrintOptions) {: RESULT=new NoPrintOptions(); :};

DesignatorStatement ::= 
    (DesignatorAssignopExpr) Designator:D1 AssignOp:A2 Expr:E3 {: RESULT=new DesignatorAssignopExpr(D1, A2, E3); RESULT.setLine(D1left); :}
    | (DesignatorInc) Designator:D1 INC {: RESULT=new DesignatorInc(D1); RESULT.setLine(D1left); :}
    | (DesignatorDec) Designator:D1 DEC {: RESULT=new DesignatorDec(D1); RESULT.setLine(D1left); :};

Designator ::= (Designator) IDENT:varName DesignatorOptions:D1 {: RESULT=new Designator(varName, D1); RESULT.setLine(varNameleft); :};

DesignatorOptions ::= (DesignatorOption) LSQBRACE Expr:E1 RSQBRACE {: RESULT=new DesignatorOption(E1); RESULT.setLine(E1left); :}
    | (NoDesignatorOptions) {: RESULT=new NoDesignatorOptions(); :};

Expr ::= (Expr) MinusOption:M1 Term:T2 AddopTermListExists:A3 {: RESULT=new Expr(M1, T2, A3); RESULT.setLine(M1left); :};

AddopTermListExists ::= (AddopTermListExist) AddopTermList:A1 {: RESULT=new AddopTermListExist(A1); RESULT.setLine(A1left); :} 
    | (NoAddopTermList) {: RESULT=new NoAddopTermList(); :};

AddopTermList ::= (AddopTermListMany) Addop:A1 Term:T2 AddopTermList:A3 {: RESULT=new AddopTermListMany(A1, T2, A3); RESULT.setLine(A1left); :}
    | (AddopTermListOne) Addop:A1 Term:T2 {: RESULT=new AddopTermListOne(A1, T2); RESULT.setLine(A1left); :};

MinusOption ::= (Minus) MINUS {: RESULT=new Minus(); :}
    | (NoMinus) {: RESULT=new NoMinus(); :};

Term ::= (Term) Factor:F1 MulopFactorListExists:M2 {: RESULT=new Term(F1, M2); RESULT.setLine(F1left); :};

MulopFactorListExists ::= (MulopFactorListExist) MulopFactorList:M1 {: RESULT=new MulopFactorListExist(M1); RESULT.setLine(M1left); :} 
    | (NoMulopFactorList) {: RESULT=new NoMulopFactorList(); :};

MulopFactorList ::= (MulopFactorListMany) Mulop:M1 Factor:F2 MulopFactorList:M3 {: RESULT=new MulopFactorListMany(M1, F2, M3); RESULT.setLine(M1left); :}
    | (MulopFactorListOne) Mulop:M1 Factor:F2 {: RESULT=new MulopFactorListOne(M1, F2); RESULT.setLine(M1left); :};

Factor ::= 
    (DesignatorFactor) Designator:D1 {: RESULT=new DesignatorFactor(D1); RESULT.setLine(D1left); :}
    | (NumConstFactor) NUMBER:value {: RESULT=new NumConstFactor(value); RESULT.setLine(valueleft); :}
    | (CharConstFactor) CHARCONST:value {: RESULT=new CharConstFactor(value); RESULT.setLine(valueleft); :}
    | (BoolConstFactor) BOOLCONST:value {: RESULT=new BoolConstFactor(); :}
    | (NewFactor) NEW Type:T1 LSQBRACE Expr:E2 RSQBRACE {: RESULT=new NewFactor(T1, E2); RESULT.setLine(T1left); :}
    | (ExprFactor) LPAREN Expr:E1 RPAREN {: RESULT=new ExprFactor(E1); RESULT.setLine(E1left); :}
    | (RangeFactor) RANGE LPAREN Expr:E1 RPAREN {: RESULT=new RangeFactor(E1); RESULT.setLine(E1left); :};

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

Label ::= (Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};

AssignOp ::= (AssignOp) EQUAL {: RESULT=new AssignOp(); :};
Relop ::= 
    (EqualityOp) EQUALITY {: RESULT=new EqualityOp(); :}
    | (NotEqualOp) NOTEQUAL {: RESULT=new NotEqualOp(); :}
    | (GTOp) GT {: RESULT=new GTOp(); :}
    | (GTEOp) GTE {: RESULT=new GTEOp(); :}
    | (LTOp) LT {: RESULT=new LTOp(); :}
    | (LTEOp) LTE {: RESULT=new LTEOp(); :};

Addop ::= (PlusOp) PLUS {: RESULT=new PlusOp(); :}
    | (MinusOp) MINUS {: RESULT=new MinusOp(); :};

Mulop ::= (MulOpMul) MUL {: RESULT=new MulOpMul(); :}
    | (DivOp) DIV {: RESULT=new DivOp(); :}
    | (ModOp) MOD {: RESULT=new ModOp(); :};
