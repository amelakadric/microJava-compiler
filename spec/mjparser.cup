package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

    boolean errorDetected;
    
    Logger log = Logger.getLogger(getClass());
   
    
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
        errorDetected = true;
        StringBuilder msg = new StringBuilder(message); 
        if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
    errorDetected = false;
:}

scan with {:
    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null) 
        log.info(s.toString() + " " + s.value.toString());
    return s;
:}


terminal PROG, PRINT, RETURN, VOID, NEW, READ, CONST, BREAK, CONTINUE, FOR, RANGE;
terminal PLUS, MINUS, MUL, DIV, MOD, INC, DEC, OR, AND, EQUALITY, NOTEQUAL, GT, GTE, LT, LTE;
terminal EQUAL, SEMI, COMMA, COLUMN, LPAREN, RPAREN, LBRACE, RBRACE, LSQBRACE, RSQBRACE, DBLCOL;
terminal COMMENT;
terminal Integer NUMBER;
terminal Integer BOOLCONST;
terminal Character CHARCONST;
terminal String IDENT;

nonterminal DeclList, DeclOne, ConstDecl, ConstOne, ConstDeclOptionsListExists, ConstDeclOptionsList, VarDeclList, VarDeclPartOne, VarDeclOne, VarDecl, SqBracesOption, VarDeclPartListExists, VarDeclPartList, StatementList, Statement, PrintOptions, DesignatorStatement, DesignatorOptions, AddopTermListExists, AddopTermList, MinusOption, MulopFactorListExists, MulopFactorList, Label, AssignOp, Relop, Addop, Mulop;
nonterminal DesignatorName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, FunctionMain, FunctionTypeName, Designator, Expr;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, TypeOptions;

Program ::= (Program) PROG ProgName:p DeclList LBRACE FunctionMain RBRACE;

ProgName ::= (ProgName) IDENT:progName;

DeclList ::= (DeclListMore) DeclList DeclOne
            | (NoDeclList);

DeclOne ::= (ConstDeclaration) ConstDecl
            | (VarDeclaration) VarDecl;

ConstDecl ::= (ConstDecl) CONST Type ConstOne ConstDeclOptionsListExists SEMI;

ConstOne::= (NumConst) IDENT:constName EQUAL NUMBER:value
            | (CharConstant)  IDENT:constName EQUAL CHARCONST:value
            | (BoolConstant)  IDENT:constName EQUAL BOOLCONST:value;



ConstDeclOptionsListExists ::= (ConstDeclOptionsListExist) ConstDeclOptionsList
    | (NoConstDeclOptions);

ConstDeclOptionsList ::= (ConstDeclOptionsListMany) ConstDeclOptionsList COMMA ConstOne
    | (ConstDeclOptionsListOne) COMMA ConstOne;


VarDeclList ::= (VarDeclListMany) VarDecl VarDeclList 
    | (NoVarDeclList);

VarDecl ::= (VarDeclarationOne) VarDeclOne  VarDeclPartListExists SEMI
    | (VarErrorComma)error COMMA:l
    {: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null); :}
    |(VarErrorSemi) error SEMI:l
    {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :};

VarDeclOne ::= (VarDeclOne) Type:varType IDENT:varName SqBracesOption:isArray;

SqBracesOption ::= (SqBraces) LSQBRACE RSQBRACE
    | (NoSqBraces);

VarDeclPartListExists ::= (VarDeclPartListExist) VarDeclPartList
    | (NoVarDeclPartList);

VarDeclPartList ::= (VarDeclPartListMany) VarDeclPartOne VarDeclPartList
    | (VarDeclPartListOne) VarDeclPartOne;

VarDeclPartOne ::= (VarDeclPartOne) COMMA IDENT:varName SqBracesOption:isArray;

FunctionMain ::= (FunctionMain)  FunctionTypeName LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE;

FunctionTypeName ::= (FunctionTypeName) TypeOptions:typeName IDENT:funcName;

TypeOptions ::= (TypeOption) Type:typeName
    | (VoidOption) VOID:typeName;

StatementList ::= (StatementListMany)  Statement StatementList
    | (NoStatementList);

Statement ::= 
    (DesignatorStatementOp) DesignatorStatement SEMI
    | (ReadStatement) READ LPAREN Designator RPAREN SEMI 
    | (PrintStatement) PRINT LPAREN Expr PrintOptions RPAREN SEMI
    | error SEMI:l
    {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :};

PrintOptions ::= (PrintOption) COMMA NUMBER:printNumber
    | (NoPrintOptions);

DesignatorStatement ::= 
    (DesignatorAssignopExpr) Designator:desig AssignOp Expr
    | (DesignatorInc) Designator:desig INC
    | (DesignatorDec) Designator:desig DEC;

Designator ::= (DesignatorSingle) IDENT:varName 
    | (DesignatorArray) DesignatorName:varName LSQBRACE Expr:e RSQBRACE;

DesignatorName ::= (DesignatorName) IDENT:varName;

DesignatorOptions ::= (DesignatorOption) LSQBRACE Expr RSQBRACE
    | (NoDesignatorOptions);

Expr ::= (Expr) MinusOption Term AddopTermListExists;

AddopTermListExists ::= (AddopTermListExist) AddopTermList 
    | (NoAddopTermList);

AddopTermList ::= (AddopTermListMany) Addop Term AddopTermList
    | (AddopTermListOne) Addop Term;

MinusOption ::= (Minus) MINUS
    | (NoMinus);

Term ::= (Term) Factor MulopFactorListExists;

MulopFactorListExists ::= (MulopFactorListExist) MulopFactorList 
    | (NoMulopFactorList);

MulopFactorList ::= (MulopFactorListMany) MulopFactorList Mulop Factor 
    | (MulopFactorListOne) Mulop Factor;

Factor ::= 
    (DesignatorFactor) Designator
    | (NumConstFactor) NUMBER:value
    | (CharConstFactor) CHARCONST:value
    | (BoolConstFactor) BOOLCONST:value
    | (NewFactor) NEW Type LSQBRACE Expr RSQBRACE
    | (ExprFactor) LPAREN Expr RPAREN
    | (RangeFactor) RANGE LPAREN Expr RPAREN;

Type ::= (Type) IDENT:typeName;

Label ::= (Label) IDENT;

AssignOp ::= (AssignOp) EQUAL;
Relop ::= 
    (EqualityOp) EQUALITY
    | (NotEqualOp) NOTEQUAL
    | (GTOp) GT
    | (GTEOp) GTE
    | (LTOp) LT
    | (LTEOp) LTE;

Addop ::= (PlusOp) PLUS
    | (MinusOp) MINUS;

Mulop ::= (MulOpMul) MUL
    | (DivOp) DIV
    | (ModOp) MOD;
