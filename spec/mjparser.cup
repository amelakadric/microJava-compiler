

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, MINUS, COMMA, PRINT, VOID, DBLCOL, LSQBRACE, RSQBRACE;
terminal MUL, DIV, MOD, INC, DEC;
terminal Integer NUMBER;
terminal String IDENT;
terminal IF, ELSE, NAMESPACE, NEW, READ, BREAK, CONTINUE;
terminal CONST, CHARCONST, BOOLCONST, OR, AND, FOR, EQUALITY, NOTEQUAL, GT, GTE, LT, LTE;

nonterminal Program, ProgName, NamespaceList, Names, DeclOptionsList, DeclOptions, ConstDecl, ConstDeclList, ConstDeclOne;
nonterminal ConstOptions, MethodDeclList, MethodDecl, FormParsOpt, FormParsList, FormPars, MethodDeclOpt, StatementList, Statement, ForPart;
nonterminal DesignatorStatementList, Designator, DesignatorStatement, NumConst, ExprOpt, Expr, Condition, CondTermList, CondTerm, CondFactList;
nonterminal CondFact, Term, Factor, ActPars, DesignatorPart, DesignatorList;
nonterminal ExprList, MulopFactorList, AddopTermList, VarList, VarDecl, Type, Addop, Mulop, Relop, ActParsParen, VarDeclPart, VarDeclPartList, Braces;
precedence left ELSE;


Program ::= (Program) PROG ProgName:p NamespaceList DeclOptionsList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT;

NamespaceList ::= (NamespaceListOpt) NamespaceList Names
					|
					(NoNameSpaceList) /* epsilon */
					;


Names ::= (NamespaceClass) NAMESPACE IDENT LBRACE DeclOptionsList LBRACE MethodDeclList RBRACE RBRACE
			;
				
DeclOptionsList ::= (DeclOptionsListMany) DeclOptionsList DeclOptions
					|
					(NoDeclOptionsList) /* epsilon */
					;

DeclOptions ::= (DeclConst) ConstDecl
				|
				(DeclVar) VarDecl
				;

ConstDecl ::= (ConstDecll) CONST Type ConstDeclOne ConstDeclList SEMI;

ConstDeclList ::= (ConstDeclListMany) ConstDeclList COMMA ConstDeclOne  
					|
					(NoConstDeclList) /* epsilon */
					;

ConstDeclOne ::= (ConstDeclOnee) IDENT EQUAL ConstOptions;

ConstOptions ::= (NumConstOpt) NUMBER 
				 |
				 (CharConstOpt) CHARCONST
				 |
				 (BoolConstOpt) BOOLCONST
				 ;

MethodDeclList ::= (MethodDeclListMany) MethodDeclList MethodDecl
					|
					(NoMethodDeclList) /* epsilon */
					;
					
MethodDecl ::= (MethodDecl) MethodDeclOpt IDENT LPAREN FormParsOpt RPAREN VarList LBRACE StatementList RBRACE
				;
				
FormParsOpt ::= (FormParsOpt1) FormParsList
				|
				(NoFormPars) /* epsilon */
				;
				
FormParsList ::= (FormParsListOpt) FormParsList COMMA FormPars
				|
				(FormParsListOne) FormPars
				;


FormPars ::= (FormParsBrace) Type IDENT LSQBRACE RSQBRACE
			|
			(FormParsNoBrace) Type IDENT
			;
				

MethodDeclOpt ::= (MethodDeclOpt1) Type
				|
				(MethodDeclOpt2) VOID
				;
				
StatementList ::= (StatementListOpt) StatementList Statement
					|
					(NoStatementList) /* epsilon */
					;
					
Statement ::= (StatementDesignator) DesignatorStatement SEMI
			|
			(StatementRead) READ LPAREN Designator RPAREN SEMI
			|
			(StatementPrint) PRINT LPAREN Expr NumConst RPAREN SEMI
			|
			(StatementReturn) RETURN ExprOpt SEMI
			|
			(StatementBreak)  BREAK SEMI
			|
			(StatementContinue) CONTINUE SEMI
			|
			(StatementIf) IF LPAREN Condition RPAREN Statement 
			|
			(StatementIfElse) IF LPAREN Condition RPAREN Statement ELSE Statement
			|
			(StatementListStatement) LBRACE StatementList RBRACE
			|
			(StatementFor) FOR LPAREN ForPart SEMI CondFact SEMI ForPart RPAREN Statement
			;
			

ForPart ::= (ForPartExists) DesignatorStatement DesignatorStatementList
			|
			(NoForPart) 
			;

DesignatorStatementList ::= DesignatorStatementList COMMA DesignatorStatement
						|
						(NoDesignatorStatementList)
						;

			
Designator ::= (DesignatorExpr) Type LSQBRACE Expr RSQBRACE
				|
				(DesignatorNoExpr) Type
				;
				
DesignatorList ::= (DesignatorListMany) DesignatorList DesignatorPart
					|
					(NoDesignatorList)
					;
					
DesignatorPart ::= (DesignatorPartExists) Designator COMMA
					|
					(NoDesignatorPart) COMMA
					;
			
DesignatorStatement ::= (DesignatorStatementExpr) Designator EQUAL Expr
						|
						(DesignatorStatementInc) Designator INC
						|
						(DesignatorStatementDec) Designator DEC
						|
						(DesignatorStatementParen) Designator LPAREN ActPars RPAREN
						|
						(DesignatorStatementMul) LSQBRACE DesignatorList MUL Designator RSQBRACE EQUAL Designator 
						;

NumConst ::= (NumConsExist) COMMA NUMBER
				|
				(NoNumConst) /* epsilon */
				;

ExprOpt ::= (ExprExists) Expr
			|
			(NoExpr) /* epsilon */
			;

Expr ::= (ExprMinus) MINUS Term AddopTermList
			|
			(ExprPlain) Term AddopTermList
			;
			
Condition ::= (Condition) CondTerm CondTermList;	

CondTermList ::= (CondTermListMore) CondTermList OR CondTerm
				|
				(CondTermListOne)
				;

CondTerm ::= (CondTerm) CondFact CondFactList;

CondFactList ::= (CondFactListMore) CondFactList AND CondFact
				|
				(CondFactListOne)
				;

CondFact ::= (CondFactOption1) Expr
			|
			(CondFactOption2) Expr Relop Expr
			;			


Term ::= (Term) Factor MulopFactorList;

Factor ::= (FactorNum) NUMBER
			|
			(FactorChar) CHARCONST
			|
			(FactorExpr) LPAREN Expr RPAREN
			|
			(FactorBool) BOOLCONST
			|
			(FactorDesignator) Designator ActParsParen
			|
			(FactorNewType) NEW Type LSQBRACE Expr RSQBRACE
			;
			
ActParsParen ::= (ActParsParenOpt) LPAREN ActPars RPAREN
				|
				(NoActParsFactor)
				;

ActPars ::= (ActParsExist) Expr ExprList 
			|
			(NoActPars) /* epsilon */
			;

ExprList ::= (ExprListMany) ExprList COMMA Expr
			|
			(NoExprList)
			;

MulopFactorList ::= (MulopFactorListExist) MulopFactorList Mulop Factor
					|
					(NoMulopFactorList)
					;

AddopTermList ::= (AddopTermListExist) AddopTermList Addop Term
				|
				(NoAddopTermList)
				;


VarList ::= (VarListMany) VarList VarDecl
			|
			(NoVarList)
			;
			
VarDecl ::= (VarBrace) Type IDENT Braces VarDeclPartList SEMI
			;

Braces ::= (BracesExists) LSQBRACE RSQBRACE
				|
				(NoBraces)
				;

VarDeclPartList ::= (VarDeclPartListMany) VarDeclPart  VarDeclPartList
					|
					(NoVarDeclPartList)
					;
					
VarDeclPart ::=(VarDeclPart) COMMA IDENT Braces;
			

Type ::= (TypeScope) IDENT DBLCOL IDENT
		|
		(TypeBasic) IDENT
		;
		
Addop ::=(Plus) PLUS
		|
		(Minus) MINUS
		;
		
Mulop ::=(Mul) MUL
		|
		(Div) DIV
		|
		(Mod) MOD
		;

Relop ::= (Equality) EQUALITY
			|
			(NotEqual) NOTEQUAL
			|
			(Greater) GT 
			|
			(GreaterEqual) GTE
			|
			(Less) LT
			|
			(LessEqual) LTE
			;	
