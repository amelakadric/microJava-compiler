package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, PRINT, RETURN, VOID, NEW, READ, CONST, BREAK, CONTINUE, FOR, RANGE;
terminal PLUS, MINUS, MUL, DIV, MOD, INC, DEC, OR, AND, EQUALITY, NOTEQUAL, GT, GTE, LT, LTE;
terminal EQUAL, SEMI, COMMA, COLUMN, LPAREN, RPAREN, LBRACE, RBRACE, LSQBRACE, RSQBRACE, DBLCOL;
terminal  COMMENT, CHARCONST, BOOLCONST;
terminal Integer NUMBER;
terminal String IDENT;

nonterminal Program, DeclList, ConstDeclList, ConstOptions, ConstDeclOptionsListExists, ConstDeclOptionsList, VarDeclList, SqBracesOption, VarDeclPartListExists, VarDeclPartList, MethodDeclListExists, MethodDeclList, MethodDecl, TypeOptions, FormParsExists, FormPars, StatementList, Statement, PrintOptions, DesignatorStatement, Designator, DesignatorOptions, Expr, AddopTermListExists, AddopTermList, MinusOption, Term, MulopFactorListExists, MulopFactorList, Factor, Type, Label, AssignOp, Relop, Addop, Mulop;
Program ::= (Program) PROG IDENT ConstDeclList VarDeclList LBRACE MethodDeclListExists RBRACE;

DeclList::= (ConstDeclarations) ConstDeclList
            |(VarDeclarations)   VarDeclList 
            |(NoDeclList) ;

ConstDeclList::= (ConstDeclListOne) CONST Type IDENT EQUAL ConstOptions ConstDeclOptionsListExists SEMI
    | (ConstDeclListMany) CONST Type IDENT EQUAL ConstOptions ConstDeclOptionsListExists SEMI ConstDeclList;


ConstOptions ::= (NumConst) NUMBER 
    | (CharConst) CHARCONST
    | (BoolConst) BOOLCONST; 

ConstDeclOptionsListExists ::= (ConstDeclOptionsListExist) ConstDeclOptionsList 
                            | (NoConstDeclOptions);

ConstDeclOptionsList ::= (ConstDeclOptionsListMany) ConstDeclOptionsList COMMA IDENT EQUAL ConstOptions 
    | (ConstDeclOptionsListOne)COMMA IDENT EQUAL ConstOptions;

VarDeclList ::= (VarDeclListOne) Type IDENT SqBracesOption VarDeclPartListExists SEMI
    | (VarDeclListMany) Type IDENT SqBracesOption VarDeclPartListExists SEMI VarDeclList
    |error COMMA:l
    {: parser.report_error("Izvrsen oporavak do , u liniji " +lleft, null); :}
    | error SEMI:l
    {: parser.report_error("Izvrsen oporavak do ; u liniji " +lleft, null); :};


SqBracesOption ::= (SqBraces) LSQBRACE RSQBRACE 
        | (NoSqBraces);

VarDeclPartListExists ::= (VarDeclPartListExist) VarDeclPartList 
            | (NoVarDeclPartList);

VarDeclPartList ::= (VarDeclPartListMany) COMMA IDENT SqBracesOption VarDeclPartList
    | (VarDeclPartListOne) COMMA IDENT SqBracesOption;

MethodDeclListExists ::= (MethodDeclListExist) MethodDeclList 
    | (NoMethodDeclList);

MethodDeclList ::= (MethodDeclListMany) MethodDeclList MethodDecl
    | (MethodDeclListOne) MethodDecl;

MethodDecl ::= (MethodDecl) TypeOptions IDENT LPAREN FormParsExists RPAREN VarDeclList LBRACE StatementList RBRACE;

TypeOptions ::= (TypeOption) Type 
    | (VoidOption) VOID;


FormParsExists ::= (FormParsExist) FormPars 
    | (NoFormPars);

FormPars ::= (FormParsMany) Type IDENT SqBracesOption FormPars
    | (FormParsOne) Type IDENT SqBracesOption;

StatementList ::= (StatementListMany) StatementList Statement
    | (NoStatementList);

Statement ::= 
    (DesignatorStatementOp) DesignatorStatement SEMI
    | (ReadStatement) READ LPAREN Designator RPAREN SEMI 
    | (PrintStatement) PRINT LPAREN Expr PrintOptions RPAREN SEMI
    | error SEMI:l
    {: parser.report_error("Izvrsen oporavak do ; u liniji " +lleft, null); :};

PrintOptions ::= (PrintOption) COMMA NUMBER
    | (NoPrintOptions);
    
DesignatorStatement ::= 
    (DesignatorAssignopExpr) Designator AssignOp Expr|
    (DesignatorInc) Designator INC |
    (DesignatorDec) Designator DEC;

Designator ::= (Designator) Type DesignatorOptions;

DesignatorOptions ::= (DesignatorOption) LSQBRACE Expr RSQBRACE
    | (NoDesignatorOptions);

Expr ::= (Expr) MinusOption Term AddopTermListExists;

AddopTermListExists ::= (AddopTermListExist) AddopTermList 
    | (NoAddopTermList);

AddopTermList ::= (AddopTermListMany) Addop Term AddopTermList
    | (AddopTermListOne) Addop Term;

MinusOption ::= (Minus) MINUS
    | (NoMinus);

Term ::= (Term) Factor MulopFactorListExists;

MulopFactorListExists::= (MulopFactorListExist) MulopFactorList 
    | (NoMulopFactorList);

MulopFactorList ::= (MulopFactorListMany) Mulop Factor MulopFactorList
    | (MulopFactorListOne) Mulop Factor;


Factor ::= 
    (DesignatorFactor) Designator |
    (NumConstFactor) NUMBER |
    (CharConstFactor) CHARCONST |
    (BoolConstFactor) BOOLCONST |
    (NewFactor) NEW Type LSQBRACE Expr RSQBRACE|
    (ExprFactor) LPAREN Expr RPAREN|
    (RangeFactor) RANGE LPAREN Expr RPAREN;

Type ::= (TypeScope) IDENT DBLCOL IDENT 
    | (TypeIdent) IDENT;

Label ::= (Label) IDENT;

AssignOp ::=  (AssignOp) EQUAL;
Relop ::= 
        (EqualityOp)EQUALITY 
        | (NotEqualOp) NOTEQUAL 
        | (GOp) GT 
        | (GTEOp) GTE 
        | (LTOp) LT 
        | (LTEOp) LTE;

Addop ::= (PlusOp) PLUS 
        |(MinusOp) MINUS;
Mulop ::= (MulOpMul) MUL |  (DivOp) DIV | (ModOp) MOD;



